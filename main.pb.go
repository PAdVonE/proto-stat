// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

package stat_repository

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("main.proto", fileDescriptor_7ed94b0a22d11796) }

var fileDescriptor_7ed94b0a22d11796 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x17, 0x82, 0xe8, 0x9d, 0x01, 0x21, 0xa0, 0x8b, 0x0a, 0xfe, 0xee, 0x33, 0xa0, 0x8f,
	0x50, 0x1d, 0x44, 0xd4, 0x45, 0x47, 0xdc, 0x67, 0xca, 0x71, 0x08, 0x76, 0x9a, 0x9a, 0x7b, 0x67,
	0x4a, 0x5f, 0xd3, 0x27, 0x92, 0x26, 0xad, 0x0b, 0xad, 0x74, 0x76, 0x09, 0xe7, 0xe4, 0xcb, 0x97,
	0x1b, 0xa2, 0xb5, 0xb1, 0xa5, 0xae, 0xbc, 0x13, 0xa7, 0x8e, 0x58, 0x8c, 0x68, 0x8f, 0xca, 0xb1,
	0x15, 0xe7, 0x9b, 0xe4, 0x74, 0xe5, 0xdc, 0xaa, 0xc0, 0x2c, 0xc4, 0xcb, 0xcd, 0xfb, 0x0c, 0xeb,
	0x4a, 0x9a, 0xd8, 0x4e, 0xa6, 0x79, 0x61, 0x51, 0x4a, 0xb7, 0xa3, 0xad, 0x45, 0xdd, 0xad, 0x27,
	0x79, 0x61, 0xf3, 0x8f, 0xbe, 0xe6, 0x9d, 0x18, 0xdf, 0x1d, 0xba, 0xf9, 0xda, 0xa3, 0xe3, 0x85,
	0x18, 0xc9, 0x7e, 0x2e, 0x59, 0xc0, 0x6f, 0x6d, 0x0e, 0x35, 0xa7, 0x69, 0xea, 0x61, 0x04, 0x69,
	0xc0, 0xaa, 0x33, 0xfd, 0xcb, 0x46, 0xc7, 0x20, 0xc3, 0xe7, 0x06, 0x2c, 0xc9, 0x89, 0x8e, 0x72,
	0xba, 0x97, 0xd3, 0xf7, 0xad, 0x9c, 0xba, 0xa3, 0x83, 0x37, 0x8b, 0xfa, 0x05, 0x35, 0xab, 0x8b,
	0x3f, 0x8c, 0x3e, 0x1a, 0xa3, 0x3c, 0x10, 0xb5, 0xd5, 0x57, 0x18, 0x86, 0x57, 0x57, 0x83, 0x9c,
	0x18, 0x8e, 0x91, 0xe6, 0x74, 0x98, 0xb6, 0xe3, 0x08, 0x42, 0x97, 0x43, 0x8f, 0x8a, 0xd9, 0x18,
	0xe7, 0x91, 0x26, 0xa1, 0xdb, 0x29, 0x5d, 0x0f, 0x93, 0x76, 0x73, 0x7a, 0x26, 0xca, 0xc2, 0xaf,
	0x3c, 0x59, 0x1e, 0x9a, 0x74, 0x0c, 0x7b, 0xca, 0xf9, 0xbf, 0x39, 0x57, 0xae, 0x64, 0x2c, 0xf7,
	0x03, 0xfe, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2a, 0x53, 0xed, 0x4c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatRepositoryServiceClient is the client API for StatRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatRepositoryServiceClient interface {
	CreateClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ViewNews(ctx context.Context, in *ViewNewsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ViewTeaser(ctx context.Context, in *ViewTeaserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClickNews(ctx context.Context, in *ClickNewsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClickTeaser(ctx context.Context, in *ClickTeaserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RotaryList(ctx context.Context, in *RotaryRequest, opts ...grpc.CallOption) (*RotaryResponse, error)
}

type statRepositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatRepositoryServiceClient(cc *grpc.ClientConn) StatRepositoryServiceClient {
	return &statRepositoryServiceClient{cc}
}

func (c *statRepositoryServiceClient) CreateClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statRepositoryServiceClient) ViewNews(ctx context.Context, in *ViewNewsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/ViewNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statRepositoryServiceClient) ViewTeaser(ctx context.Context, in *ViewTeaserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/ViewTeaser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statRepositoryServiceClient) ClickNews(ctx context.Context, in *ClickNewsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/ClickNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statRepositoryServiceClient) ClickTeaser(ctx context.Context, in *ClickTeaserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/ClickTeaser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statRepositoryServiceClient) RotaryList(ctx context.Context, in *RotaryRequest, opts ...grpc.CallOption) (*RotaryResponse, error) {
	out := new(RotaryResponse)
	err := c.cc.Invoke(ctx, "/stat.repository.StatRepositoryService/RotaryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatRepositoryServiceServer is the server API for StatRepositoryService service.
type StatRepositoryServiceServer interface {
	CreateClient(context.Context, *ClientRequest) (*empty.Empty, error)
	ViewNews(context.Context, *ViewNewsRequest) (*empty.Empty, error)
	ViewTeaser(context.Context, *ViewTeaserRequest) (*empty.Empty, error)
	ClickNews(context.Context, *ClickNewsRequest) (*empty.Empty, error)
	ClickTeaser(context.Context, *ClickTeaserRequest) (*empty.Empty, error)
	RotaryList(context.Context, *RotaryRequest) (*RotaryResponse, error)
}

// UnimplementedStatRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatRepositoryServiceServer struct {
}

func (*UnimplementedStatRepositoryServiceServer) CreateClient(ctx context.Context, req *ClientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedStatRepositoryServiceServer) ViewNews(ctx context.Context, req *ViewNewsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewNews not implemented")
}
func (*UnimplementedStatRepositoryServiceServer) ViewTeaser(ctx context.Context, req *ViewTeaserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewTeaser not implemented")
}
func (*UnimplementedStatRepositoryServiceServer) ClickNews(ctx context.Context, req *ClickNewsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickNews not implemented")
}
func (*UnimplementedStatRepositoryServiceServer) ClickTeaser(ctx context.Context, req *ClickTeaserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickTeaser not implemented")
}
func (*UnimplementedStatRepositoryServiceServer) RotaryList(ctx context.Context, req *RotaryRequest) (*RotaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotaryList not implemented")
}

func RegisterStatRepositoryServiceServer(s *grpc.Server, srv StatRepositoryServiceServer) {
	s.RegisterService(&_StatRepositoryService_serviceDesc, srv)
}

func _StatRepositoryService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).CreateClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatRepositoryService_ViewNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).ViewNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/ViewNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).ViewNews(ctx, req.(*ViewNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatRepositoryService_ViewTeaser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewTeaserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).ViewTeaser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/ViewTeaser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).ViewTeaser(ctx, req.(*ViewTeaserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatRepositoryService_ClickNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).ClickNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/ClickNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).ClickNews(ctx, req.(*ClickNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatRepositoryService_ClickTeaser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickTeaserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).ClickTeaser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/ClickTeaser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).ClickTeaser(ctx, req.(*ClickTeaserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatRepositoryService_RotaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatRepositoryServiceServer).RotaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.repository.StatRepositoryService/RotaryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatRepositoryServiceServer).RotaryList(ctx, req.(*RotaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatRepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stat.repository.StatRepositoryService",
	HandlerType: (*StatRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _StatRepositoryService_CreateClient_Handler,
		},
		{
			MethodName: "ViewNews",
			Handler:    _StatRepositoryService_ViewNews_Handler,
		},
		{
			MethodName: "ViewTeaser",
			Handler:    _StatRepositoryService_ViewTeaser_Handler,
		},
		{
			MethodName: "ClickNews",
			Handler:    _StatRepositoryService_ClickNews_Handler,
		},
		{
			MethodName: "ClickTeaser",
			Handler:    _StatRepositoryService_ClickTeaser_Handler,
		},
		{
			MethodName: "RotaryList",
			Handler:    _StatRepositoryService_RotaryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
